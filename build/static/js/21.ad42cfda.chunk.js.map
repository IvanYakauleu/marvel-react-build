{"version":3,"file":"static/js/21.ad42cfda.chunk.js","mappings":"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","sources":["components/appBaner/appBaner.js","components/errorMessage/errorMessage.js","components/comicsList/comicsList.js","components/pages/comicsPage.js","services/marvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBaner.scss'\r\n\r\nimport avangers from '../../resurses/img/Avengers.png';\r\nimport avangersLogo from '../../resurses/img/Avengers-logo.png'\r\n\r\nconst AppBaner = () => {\r\n    return (\r\n        <div className=\"appBaner\">\r\n            <img src={avangers} alt=\"avangers\" />\r\n            <div className=\"appBaner__text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avangersLogo} alt=\"avangers logo\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBaner;\r\n","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\"}} src={img} alt=\"error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './comicsList.scss'\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/marvelService';\r\nimport ErrorMessage from '../errorMessage/errorMessage';\r\nimport Spinner from '../spinner/spinner';\r\n\r\n\r\nconst ComicsList = () => {\r\n\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [offset, setOffset] = useState(210);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n    const {loading, error, getAllComics} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true)\r\n    }, [])\r\n\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded)\r\n    }\r\n\r\n    const onComicsListLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n\r\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\r\n        setOffset(offset => offset + 9);\r\n        setComicsEnded(ended);\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            return (\r\n                <CSSTransition timeout={600} key={i} classNames={'comics__item'}>\r\n                    <li className=\"comics__item\">\r\n                        <Link to={`/comics/${item.id}`}>\r\n                                <img src={item.thumbnail} alt=\"ultimate war\" className=\"comics__img\" />\r\n                                <div className=\"comics__descr\">{item.name}</div>\r\n                                <div className=\"comics__price\">{item.price ? item.price + '$' : 'not available'}</div>\r\n                        </Link>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <TransitionGroup className='comics__wrapper'>\r\n                {items}\r\n            </TransitionGroup>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(comicsList)\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}                  \r\n            <div \r\n                className=\"button button_red button_long\"\r\n                style={{'display': comicsEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                    LOAD MORE\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","import { Helmet } from 'react-helmet';\r\n\r\nimport AppBaner from '../appBaner/appBaner';\r\nimport ComicsList from '../comicsList/comicsList';\r\n\r\nconst ComicsPage = () => {\r\n    \r\n    return (\r\n        <>\r\n            <Helmet>\r\n            <meta\r\n                name=\"description\"\r\n                content=\"Page with list of our comics\"\r\n            />\r\n            <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBaner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    \r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=204e8daa4fa4e2b5a23c1784ae822151';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n       const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n       return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            name: comics.title,\r\n            description: comics.description,\r\n            page: comics.pageCount,\r\n            language: comics.textObjects[0]?.language,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? char.description : \"There is no description for this character\",\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        \r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n            \r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(true);\r\n            throw e;\r\n        }\r\n    }, [])\r\n    \r\n    const clearError = useCallback(() => setError(false), [])\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["_jsxs","className","children","_jsx","src","avangers","alt","avangersLogo","style","display","width","height","objectFit","margin","img","_useState","useState","_useState2","_slicedToArray","comicsList","setComicsList","_useState3","_useState4","offset","setOffset","_useState5","_useState6","newItemLoading","setNewItemLoading","_useState7","_useState8","comicsEnded","setComicsEnded","_useMarvelService","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","concat","_toConsumableArray","items","arr","map","item","i","CSSTransition","timeout","classNames","Link","to","id","thumbnail","name","price","TransitionGroup","renderItems","errorMessage","ErrorMessage","spinner","Spinner","onClick","_Fragment","Helmet","content","AppBaner","ComicsList","_useHttp","setLoading","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getCharacter","_ref2","_callee2","_context2","getCharacterByName","_ref3","_callee3","_context3","_x2","getComic","_ref4","_callee4","_context4","_transformComics","_x3","_ref5","_callee5","_args5","_context5","comics","_comics$textObjects$","title","description","page","pageCount","language","textObjects","path","extension","prices","char","homepage","urls","wiki"],"sourceRoot":""}